name: C/C++ CI

on:
  push:
    tags:
    - v*.*
  pull_request:
    branches:
    - master

env:
  LSL_URL: 'https://github.com/sccn/liblsl/releases/download'
  LSL_RELEASE_PREFIX: 'v'
  LSL_RELEASE: '1.14.0'
  LSL_RELEASE_SUFFIX: 'b4'


jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macOS-latest
      fail-fast: false

    steps:
    - uses: actions/checkout@v2

    - name: CMake version
      run: cmake --version

    - name: download liblsl (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
           echo ${{ github.ref }}
           curl -L ${LSL_URL}/${LSL_RELEASE_PREFIX}${LSL_RELEASE}${LSL_RELEASE_SUFFIX}/liblsl-${LSL_RELEASE}-Linux64-bionic.deb -o liblsl.deb
           sudo dpkg -i liblsl.deb
           sudo apt install -y qtbase5-dev qtmultimedia5-dev

    - name: download liblsl (Windows)
      if: matrix.os == 'windows-latest'
      run: |
           Invoke-WebRequest -Uri $Env:LSL_URL/$Env:LSL_RELEASE_PREFIX$Env:LSL_RELEASE$Env:LSL_RELEASE_SUFFIX/liblsl-$Env:LSL_RELEASE-Win64.zip -o liblsl.7z
           7z x liblsl.7z -oLSL

    - name: download liblsl (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
           curl -L ${LSL_URL}/${LSL_RELEASE_PREFIX}${LSL_RELEASE}${LSL_RELEASE_SUFFIX}/liblsl-${LSL_RELEASE}-OSX64.tar.bz2 -o liblsl.tar.bz2
           mkdir LSL
           tar -xvf liblsl.tar.bz2 -C LSL
           brew install qt
           echo '::set-env name=CMAKE_PREFIX_PATH::/usr/local/opt/qt'
       # TODO: Need to fix liblsl CI

    - name: Install Qt
      if: matrix.os == 'windows-latest'
      uses: jurplel/install-qt-action@v2
      with:
        version: 5.15.1

    - name: Configure CMake
      shell: bash
      run: |
           cmake -S . -B build -DLSL_INSTALL_ROOT=$PWD/LSL/ -DCPACK_DEBIAN_PACKAGE_SHLIBDEPS=ON -DCPACK_DEBIAN_PACKAGE_DEPENDS=1

    - name: Make
      run: cmake --build build --config Release -j

    - name: Install
      run: cmake --build build --config Release -j --target install

    - name: Package
      run: cmake --build build --config Release -j --target package
      
    # TODO: Can reconstruct filename from project name and version in CMakeCache.txt using powershell:
    # Select-String -Path build\CMakeCache.txt -Pattern "CMAKE_PROJECT_NAME:STATIC=(.*)" | % { $_.matches.groups[1] } | % {$_.Value}
    # Select-String -Path build\CMakeCache.txt -Pattern "CMAKE_PROJECT_VERSION:STATIC=(.*)" | % { $_.matches.groups[1] } | % {$_.Value}
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: pkg-${{ matrix.os }}
        path: |
            build/*.deb
            build/*.tar.bz2
            build/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    
    - name: Download Artifact
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/download-artifact@v2
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # tag_name: ${{ github.ref }}  # ${{ github.ref }} is default
        name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        # body_path: CHANGELOG.txt
        files: 'pkg-*/*'

